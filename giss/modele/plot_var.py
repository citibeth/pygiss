import giss.plotutil
import giss.util
import numpy as np

_hotcold_18lev = giss.plotutil.parse_cpt(
	'# ../cpt/ncar/hotcold_18lev.cpt\n'
	'# autogenerated GMT palette "hotcold_18lev.txt"\n'
	'# cptutils version 1.41, Fri Jan 20 21:02:02 2012\n'
	'# COLOR_MODEL = RGB\n'
	'0.000000e+00  24  24 112 1.000000e+00  24  24 112\n'
	'1.000000e+00  16  78 139 2.000000e+00  16  78 139\n'
	'2.000000e+00  23 116 205 3.000000e+00  23 116 205\n'
	'3.000000e+00  72 118 255 4.000000e+00  72 118 255\n'
	'4.000000e+00  91 172 237 5.000000e+00  91 172 237\n'
	'5.000000e+00 173 215 230 6.000000e+00 173 215 230\n'
	'6.000000e+00 209 237 237 7.000000e+00 209 237 237\n'
	'7.000000e+00 229 239 249 8.000000e+00 229 239 249\n'
	'8.000000e+00 242 255 255 9.000000e+00 242 255 255\n'
	'9.000000e+00 255 255 255 1.000000e+01 255 255 255\n'
	'1.000000e+01 253 245 230 1.100000e+01 253 245 230\n'
	'1.100000e+01 255 228 180 1.200000e+01 255 228 180\n'
	'1.200000e+01 243 164  96 1.300000e+01 243 164  96\n'
	'1.300000e+01 237 118   0 1.400000e+01 237 118   0\n'
	'1.400000e+01 205 102  29 1.500000e+01 205 102  29\n'
	'1.500000e+01 224  49  15 1.600000e+01 224  49  15\n'
	'1.600000e+01 237   0   0 1.700000e+01 237   0   0\n'
	'1.700000e+01 205   0   0 1.800000e+01 205   0   0\n'
	'1.800000e+01 139   0   0 1.900000e+01 139   0   0\n'
	'B   0   0   0\n'
	'F 255 255 255\n'
	'N 255   0   0\n')[0]


_zero_centered = {'evap_lndice', 'imph_lndice', 'impm_lndice', 'netht_lndice'} #, 'trht_lndice'}

_rescale_factors = {'impm_lndice' : (86400., 'kg/day*m^2')}

# Reads a variable out of a netCDF file and plots it.
# @return Info structure, good for title, units and other stuff
def plot_var(plotter, mymap, scaled_nc, var_name, **_plotargs) :

	plotargs = dict(_plotargs)

	# Look up units and long_name
	info = dict(scaled_nc.variables[var_name].__dict__)

	# Get the value
	val = giss.modele.read_ncvar(scaled_nc, var_name)

	# Rescale the variable if called for
	if var_name in _rescale_factors :
		rs = _rescale_factors[var_name]
		val *= rs[0]
		info['units'] = rs[1]

	# See if we should use a positive/negative colorbar
	cbargs = {}
	info['cbargs'] = cbargs

	if var_name in _zero_centered :
		if 'norm' not in plotargs :
			plotargs['norm'] = giss.plotutil.AsymmetricNormalize()
		if 'cmap' not in plotargs :
			plotargs['cmap'] = _hotcold_18lev
		if 'vmin' not in plotargs :
			plotargs['vmin'] = np.min(val)
		if 'vmax' not in plotargs :
			plotargs['vmax'] = np.max(val)
		cbargs['ticks'] = [plotargs['vmin'], 0, plotargs['vmax']]
		cbargs['format'] = '%0.2f'

	info['im'] = plotter.pcolormesh(mymap, val, **plotargs)
	info['sname'] = var_name

	return giss.util.Struct(info)
